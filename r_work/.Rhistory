get_volumes <- function(some_df){
some_df %>%
group_by(project_name) %>%
summarise(total_MB = sum(bytes) / 100000,
n_files = n()) %>%
select(project_name, n_files, total_MB)
}
volume_all <- get_volumes(big_inv)
volume_zip_xml <- get_volumes(zips_xml)
volume_potential_archives <- get_volumes(potential_archives)
write_csv(volume_all, timestamp_filename(data_dir, "02_volume_all"))
write_csv(volume_zip_xml, timestamp_filename(data_dir, "02_volume_zip_xml"))
write_csv(volume_potential_archives,
timestamp_filename(data_dir, "02_volume_potential_archives"))
#' Get volume for all files in each project
#'
#' This function uses group_by to summarise the total volume and number of files
#' in each project in the `some_df` data frame. It returns a data frame with
#' the project name, number of files, and total volume in bytes.
#'
#' @param some_df a data frame with columns project_name, bytes, and file_name
#'
#' @noRd
get_volumes <- function(some_df){
some_df %>%
group_by(project_name) %>%
summarise(total_MB = sum(bytes) / 100000 %>% round(3),
n_files = n()) %>%
select(project_name, n_files, total_MB)
}
volume_all <- get_volumes(big_inv)
volume_zip_xml <- get_volumes(zips_xml)
volume_potential_archives <- get_volumes(potential_archives)
write_csv(volume_all, timestamp_filename(data_dir, "02_volume_all"))
write_csv(volume_zip_xml, timestamp_filename(data_dir, "02_volume_zip_xml"))
write_csv(volume_potential_archives,
timestamp_filename(data_dir, "02_volume_potential_archives"))
#' Get volume for all files in each project
#'
#' This function uses group_by to summarise the total volume and number of files
#' in each project in the `some_df` data frame. It returns a data frame with
#' the project name, number of files, and total volume in bytes.
#'
#' @param some_df a data frame with columns project_name, bytes, and file_name
#'
#' @noRd
get_volumes <- function(some_df){
some_df %>%
group_by(project_name) %>%
summarise(total_MB = round(sum(bytes) / 100000, 3),
n_files = n()) %>%
select(project_name, n_files, total_MB)
}
#' Get volume for all files in each project
#'
#' This function uses group_by to summarise the total volume and number of files
#' in each project in the `some_df` data frame. It returns a data frame with
#' the project name, number of files, and total volume in bytes.
#'
#' @param some_df a data frame with columns project_name, bytes, and file_name
#'
#' @noRd
get_volumes <- function(some_df){
some_df %>%
group_by(project_name) %>%
summarise(total_MB = round(sum(bytes) / 100000, 3),
n_files = n()) %>%
select(project_name, n_files, total_MB)
}
volume_all <- get_volumes(big_inv)
volume_zip_xml <- get_volumes(zips_xml)
volume_potential_archives <- get_volumes(potential_archives)
write_csv(volume_all, timestamp_filename(data_dir, "02_volume_all"))
write_csv(volume_zip_xml, timestamp_filename(data_dir, "02_volume_zip_xml"))
write_csv(volume_potential_archives,
timestamp_filename(data_dir, "02_volume_potential_archives"))
View(potential_projects)
remove(list=ls())
pacman::p_load(tidyverse, DBI, RPostgreSQL, keyring)
source("00_inventory_functions.R")
# connect to the RW db
psql <- dbDriver("PostgreSQL")
con <- dbConnect(
drv = psql,
dbname = "research_workspace",
host = "oltp.db.axiomptk",
port = 5432,
password = key_get("workspace_read", keyring = "dbs"),
user = "workspace_read"
)
# Query RW db to get id and names for all projects in NPRB
# organization that match the regex
q <- paste0(
"SELECT id as proj_id, name as proj_name
FROM project
WHERE project.id IN
(SELECT project_id
FROM projectorgrole
WHERE projectorgrole.org_id IN
(SELECT id
FROM organization
WHERE organization.name='North Pacific Research Board'))
AND project.name ~ '^0[0-9]{3}[A-Za-z]* '
OR project.name ~ '^1[1-4]{1}[0-9]{2}[A-Za-z]* '"
)
project_names <- dbGetQuery(con, q)
## get all files in each project
proj_ids <- project_names %>%
pull(proj_id) %>%
paste(collapse = ",")
q <- paste0(
"SELECT id, bytes, filename, mimetype, folder_id, project_id
FROM document
WHERE project_id IN (", proj_ids ,")
AND deleted IS NULL
AND folder_id IS NOT NULL"
)
remove(proj_ids)
all_docs <- dbGetQuery(con, q)
names(all_docs)[1] <- "file_id"
names(all_docs)[3] <- "file_name"
## get all folders for all files
folder_ids <- all_docs %>%
pull(folder_id) %>%
paste(collapse = ",") %>%
unique()
pacman::p_load(tidyverse)
source("00_inventory_functions.R")
data_dir <- "data_out/"
big_inv <- read_csv(paste0(data_dir, "01_full_inventory.csv"))
potential_projects <- big_inv %>%
group_by(project_name) %>%
#filter(file_name %>%
#         str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 1,  n_xml > 1)
potential_folders <- big_inv %>%
group_by(folder_name) %>%
#  filter(file_name %>%
#           str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 0,  n_xml > 0)
write_csv(potential_folders,
timestamp_filename(data_dir, "02_potential_folders"))
potential_folders <- big_inv %>%
group_by(path) %>%
#  filter(file_name %>%
#           str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 0,  n_xml > 0)
write_csv(potential_folders,
timestamp_filename(data_dir, "02_potential_folders"))
potential_folders <- big_inv %>%
group_by(project_name, path) %>%
#  filter(file_name %>%
#           str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
select(file_name, bytes, mimetype,
project_id, folder_id, folder_name, file_id) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 0,  n_xml > 0)
write_csv(potential_folders,
timestamp_filename(data_dir, "02_potential_folders"))
length(unique(potential_folders$project_name))
potential_folders <- big_inv %>%
group_by(project_name, path) %>%
#  filter(file_name %>%
#           str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
select(file_name, bytes, mimetype,
project_id, folder_id, folder_name, file_id) %>%
summarize(n_zip = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.zip")),
n_xml = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.xml"))) %>%
filter(n_zip > 0,  n_xml > 0)
write_csv(potential_folders,
timestamp_filename(data_dir, "02_potential_folders"))
potential_folders <- big_inv %>%
group_by(project_name, path) %>%
#  filter(file_name %>%
#           str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
select(file_name, bytes, mimetype,
project_id, folder_id, folder_name, file_id) %>%
summarize(n_zip = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.zip")),
n_xml = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.xml"))) %>%
filter(n_zip > 0,  n_xml > 0) %>%
unique()
write_csv(potential_folders,
timestamp_filename(data_dir, "02_potential_folders"))
# find all folders at least one zip and xml file that match the regex
potential_archives <- big_inv %>%
group_by(project_name, path) %>%
select(file_name, bytes, mimetype,
project_id, folder_id, folder_name, file_id) %>%
summarize(n_zip = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.zip")),
n_xml = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.xml"))) %>%
filter(n_zip > 0,  n_xml > 0)
# how many projects are there with zip and xml files?
projects_summary <- data.frame(
all_projects = length(unique(big_inv$project_name)),
project_zip_xml = length(unique(zips_xml$project_name)),
potential_archives = length(unique(potential_archives$project_name))
)
write_csv(projects_summary, timestamp_filename(data_dir, "02_projects_summary"))
pacman::p_load(tidyverse)
source("00_inventory_functions.R")
data_dir <- "data_out/"
big_inv <- read_csv(paste0(data_dir, "01_full_inventory.csv"))
potential_projects <- big_inv %>%
group_by(project_name) %>%
#  filter(file_name %>%
#           str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 1,  n_xml > 1)
# find all folders at least one zip and xml file that match the regex
potential_archives <- big_inv %>%
group_by(project_name, path) %>%
select(file_name, bytes, mimetype,
project_id, folder_id, folder_name, file_id) %>%
summarize(n_zip = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.zip")),
n_xml = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.xml"))) %>%
filter(n_zip > 0,  n_xml > 0)
write_csv(potential_archives,
timestamp_filename(data_dir, "02_potential_folders"))
# how many projects are there with zip and xml files?
projects_summary <- data.frame(
all_projects = length(unique(big_inv$project_name)),
potential_archives = length(unique(potential_archives$project_name))
)
write_csv(projects_summary, timestamp_filename(data_dir, "02_projects_summary"))
volume_all <- get_volumes(big_inv)
volume_potential_archives <- get_volumes(potential_archives)
write_csv(volume_all, timestamp_filename(data_dir, "02_volume_all"))
write_csv(volume_potential_archives,
timestamp_filename(data_dir, "02_volume_potential_archives"))
View(potential_archives)
# find all folders at least one zip and xml file that match the regex
potential_archives <- big_inv %>%
group_by(project_name, project_id, path) %>%
summarize(n_zip = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.zip")),
n_xml = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.xml"))) %>%
filter(n_zip > 0,  n_xml > 0)
write_csv(potential_archives,
timestamp_filename(data_dir, "02_potential_folders"))
pa <- potential_archives %>%
left_join(volume_all, by = c("project_id" = "project_id"))
View(potential_archives)
View(big_inv)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
#' Get volume for all files in each project
#'
#' This function uses group_by to summarise the total volume and number of files
#' in each project in the `some_df` data frame. It returns a data frame with
#' the project name, number of files, and total volume in bytes.
#'
#' @param some_df a data frame with columns project_name, bytes, and file_name
#'
#' @noRd
get_volumes <- function(some_df){
some_df %>%
group_by(project_name) %>%
summarise(total_MB = round(sum(bytes) / 100000, 3),
n_files = n()) %>%
select(project_name, project_id, n_files, total_MB)
}
volume_all <- get_volumes(big_inv)
#' Get volume for all files in each project
#'
#' This function uses group_by to summarise the total volume and number of files
#' in each project in the `some_df` data frame. It returns a data frame with
#' the project name, number of files, and total volume in bytes.
#'
#' @param some_df a data frame with columns project_name, bytes, and file_name
#'
#' @noRd
get_volumes <- function(some_df){
some_df %>%
group_by(project_name, project_id) %>%
summarise(total_MB = round(sum(bytes) / 100000, 3),
n_files = n()) %>%
select(project_name, project_id, n_files, total_MB)
}
volume_all <- get_volumes(big_inv)
pa <- potential_archives %>%
left_join(volume_all, by = c("project_id" = "project_id"))
View(pa)
pa <- potential_archives %>%
left_join(volume_all, by = c("project_id" = "project_id")) %>%
select(project_name, project_id, path, n_zip, n_xml, n_files, total_MB)
pa <- potential_archives %>%
left_join(volume_all, by = c("project_id" = "project_id")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB)
big_inv %>%
filter(file_name %>% str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
select(project_name, project_id, path, file_name, bytes)
file_deets <- big_inv %>%
filter(file_name %>% str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
select(project_name, project_id, path, file_name, bytes)
pa %>%
left_join(file_deets, by = c("project_id" = "project_id")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB,
file_name, bytes)
pa %>%
left_join(file_deets, by = c("project_id" = "project_id", "path" = "path")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB,
file_name, bytes)
pa <- potential_archives %>%
left_join(volume_all, by = c("project_id" = "project_id")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB)
pa %>%
left_join(file_deets, by = c("project_id" = "project_id", "path" = "path")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB,
file_name, bytes) %>%
rename(file_kb = bytes * 1000)
pa %>%
left_join(file_deets, by = c("project_id" = "project_id", "path" = "path")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB,
file_name, bytes) %>%
mutate(byetes = bytes / 1000) %>%
rename(file_kb = bytes)
pa %>%
left_join(file_deets, by = c("project_id" = "project_id", "path" = "path")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB,
file_name, bytes) %>%
mutate(bytes = bytes / 1000) %>%
rename(file_kb = bytes)
pa <- potential_archives %>%
left_join(volume_all, by = c("project_id" = "project_id")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB)
file_deets <- big_inv %>%
filter(file_name %>% str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
select(project_name, project_id, path, file_name, bytes)
potential_archvies <- pa %>%
left_join(file_deets, by = c("project_id" = "project_id", "path" = "path")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB,
file_name, bytes) %>%
mutate(bytes = bytes / 1000) %>%
rename(file_kb = bytes)
write_csv(potential_archvies,
timestamp_filename(data_dir, "02_potential_archives"))
potential_archvies <- pa %>%
left_join(file_deets, by = c("project_id" = "project_id", "path" = "path")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB,
file_name, bytes) %>%
mutate(bytes = bytes / 1000) %>%
rename(file_kb = bytes, project_name = project_name.x)
write_csv(potential_archvies,
timestamp_filename(data_dir, "02_potential_archives"))
potential_archvies <- pa %>%
left_join(file_deets, by = c("project_id" = "project_id", "path" = "path")) %>%
select(project_name.x, project_id, path, n_zip, n_xml, n_files, total_MB,
file_name, bytes) %>%
mutate(bytes = bytes / 1000000) %>%
rename(file_MB = bytes, project_name = project_name.x)
write_csv(potential_archvies,
timestamp_filename(data_dir, "02_potential_archives"))
pacman::p_load(tidyverse)
source("00_inventory_functions.R")
data_dir <- "data_out/"
big_inv <- read_csv(paste0(data_dir, "01_full_inventory.csv"))
potential_projects <- big_inv %>%
group_by(project_name) %>%
#  filter(file_name %>%
#           str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 1,  n_xml > 1)
vol_arch <- volume_all %>%
ifelse(project_id %in% potential_archives$project_id,
volume_all$archive = 1,
vol_arch <- volume_all %>%
ifelse(project_id %in% potential_archives$project_id,
volume_all$archive=1,
vol_arch <- volume_all %>%
ifelse(project_id %in% potential_archives$project_id,
volume_all$archive <- 1,
volume_all$archive <- 0)
vol_arch <- volume_all
vol_arch$archive <- 0
ifelse(vol_arch$project_id %in% potential_archives$project_id,
volume_all$archive <- 1,
volume_all$archive <- 0)
vol_arch <- volume_all
# find all folders at least one zip and xml file that match the regex
potential_archives <- big_inv %>%
group_by(project_name, project_id, path) %>%
summarize(n_zip = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.zip")),
n_xml = sum(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.xml"))) %>%
filter(n_zip > 0,  n_xml > 0)
# how many projects are there with zip and xml files?
projects_summary <- data.frame(
all_projects = length(unique(big_inv$project_name)),
potential_archives = length(unique(potential_archives$project_name))
)
volume_all <- get_volumes(big_inv)
vol_arch <- volume_all
vol_arch$archive <- 0
ifelse(vol_arch$project_id %in% potential_archives$project_id,
volume_all$archive <- 1,
volume_all$archive <- 0)
vol_arch$archive <-
ifelse(vol_arch$project_id %in% potential_archives$project_id, 1, 0)
View(vol_arch)
View(volume_all)
write_csv(vol_arch,
timestamp_filename(data_dir, "02_all_volumes"))
pacman::p_load(tidyverse, DBI, RPostgreSQL, keyring)
source("00_inventory_functions.R")
key_get("workspace_read", keyring = "dbs")
Sys.getenv("WORKSPACE_READ")
gc()
pacman::p_load(tidyverse, DBI, RPostgreSQL)#, keyring)
source("00_inventory_functions.R")
#key_get("workspace_read", keyring = "dbs")
# connect to the RW db
psql <- dbDriver("PostgreSQL")
key_get("workspace_read", keyring = "dbs")
Sys.getenv("WORKSPACE_READ")
con <- dbConnect(
drv = psql,
dbname = "research_workspace",
host = "oltp.db.axiomptk",
port = 5432,
password = Sys.getenv("WORKSPACE_READ"),
user = "workspace_read"
)
###############################################################################
########################### 03_archives_maybe.R ###############################
###############################################################################
library(tidyverse)
source("r_work/00_inventory_functions.R")
pacman::p_load(tidyverse, DBI, RPostgreSQL, keyring)
key_get("workspace_read", keyring = "dbs")
keyring_list()
keyring_list(dbs)
keyring_list("dbs")
key_list(dbs)
key_list("dbs")
key_list()
keyring_list()
key_list(keyring = dbs)
key_list(keyring = "dbs")
key_get(workspace_read, keyring="dbs")
key_get("workspace_read", keyring="dbs")
key_list(keyring="Login")
keyring_create(keyring = "axiom", password = "guardshoekeyperfectly")
key_set_with_value(service = "workspace_read", password = "ieQu5Ohmie7waefi8pha")
key_set_with_value(service = "rw_api_key", password = "zMmzunPWHV68Vg")
keyring_delete("dbs")
keyring_list()
key_list(keyring="axiom")
keyring_unlock("axiom")
key_list(keyring="axiom", service="rw_api_key")
key_get("workspace_read", keyring = "axiom")
key_get(service="workspace_read", keyring = "axiom")
key_get("workspace_read")
key_delete("workspace_read")
key_delete("rw_api_key")
key_set("workspace_read", keyring="axiom")
key_set("workspace_read", keyring="axiom")
key_set("rw_api_key", keyring="axiom")
keyring_list()
key_list()
key_list(keyring="axiom")
#' a folder named based on the NPRB project code (YYNN), where YY is
#' the year the project award was distributed and NN is the sequential project
#' number assigned by NPRB
#'
#' @param p_code the project code assigned by NPRB for the project that
#' created the data
#' @param f_id the file_id from the RW DB for the file to be downloaded
#' @param f_name the name of the file in the RW
#'
#' @noRd
wget_file_from_rw <- function(out_dir, f_id, f_name){
# given an output directory and the id and name of a file in the RW,
# use the RW API to pull the files down and save them in the output dir
file_url <- paste0("https://researchworkspace.com/files/",
as.character(f_id), "/", f_name)
#api_key <- Sys.getenv("RW_API_KEY")
api_key <- key_get("rw_api_key", keyring = "axiom")
wget_command <- paste0('wget --header "api-key: ', api_key,
'" -P ', out_dir, ' ', file_url)
system(wget_command)
}
pacman::p_load(tidyverse, DBI, RPostgreSQL)
source("00_inventory_functions.R")
# connect to the RW db
psql <- dbDriver("PostgreSQL")
con <- dbConnect(
drv = psql,
dbname = "research_workspace",
host = "oltp.db.axiomptk",
port = 5432,
password = Sys.getenv("WORKSPACE_READ"),
user = "workspace_read"
)
