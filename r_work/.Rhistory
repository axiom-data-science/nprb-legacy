## get folder names from ids
another_copy <- get_folder_names(af_copy, all_folders)
names(another_copy) <- make.names(names(another_copy), unique = TRUE)
all_paths <- make_path(another_copy) %>%
select("folder_depth_1", "path")
remove(another_copy)
all_folders <- all_folders %>%
left_join(all_paths, by = c("folder_id" = "folder_depth_1"))
## get project names
names(docs_w_folders)
docs_w_folders <- docs_w_folders %>%
left_join(project_names, by = c("project_id.x" = "proj_id")) %>%
select(proj_name, proj_id, folder_name, folder_id, file_name, file_id,
bytes, mimetype, parent_id, path)
## get project names
names(docs_w_folders)
names(project_names)
docs_w_folders <- docs_w_folders %>%
left_join(project_names, by = c("project_id.x" = "proj_id")) %>%
select(proj_name, project_id.x, folder_name, folder_id, file_name, file_id,
bytes, mimetype, parent_id, path)
## get project names
names(docs_w_folders)
names(all_folders)
## get project names
names(docs_w_folders)
names(project_names)
docs_w_folders <- docs_w_folders %>%
left_join(project_names, by = c("project_id.x" = "proj_id")) %>%
select(proj_name, project_id.x, folder_name, folder_id, file_name, file_id,
bytes, mimetype, parent_id)
full_inventory <- docs_w_folders %>%
rename(project_id = project_id.x) %>%
left_join(all_folders, by = c("folder_id" = "folder_id")) %>%
select(proj_name, project_id, folder_name, folder_id, file_name,
file_id, bytes, mimetype, path)
## get project names
names(docs_w_folders)
pacman::p_load(tidyverse, DBI, RPostgreSQL, keyring)
source("01_nprb-inventory_functions.R")
# connect to the RW db
psql <- dbDriver("PostgreSQL")
con <- dbConnect(
drv = psql,
dbname = "research_workspace",
host = "oltp.db.axiomptk",
port = 5432,
password = key_get("workspace_read", keyring = "dbs"),
user = "workspace_read"
)
# Query RW db to get id and names for all projects in NPRB
# organization that match the regex
q <- paste0(
"SELECT id as proj_id, name as proj_name
FROM project
WHERE project.id IN
(SELECT project_id
FROM projectorgrole
WHERE projectorgrole.org_id IN
(SELECT id
FROM organization
WHERE organization.name='North Pacific Research Board'))
AND project.name ~ '^0[0-9]{3}[A-Za-z]* '
OR project.name ~ '^1[1-4]{1}[0-9]{2}[A-Za-z]* '"
)
project_names <- dbGetQuery(con, q)
## get all files in each project
proj_ids <- project_names %>%
pull(proj_id) %>%
paste(collapse = ",")
q <- paste0(
"SELECT id, bytes, filename, mimetype, folder_id, project_id
FROM document
WHERE project_id IN (", proj_ids ,")
AND deleted IS NULL
AND folder_id IS NOT NULL"
)
remove(proj_ids)
all_docs <- dbGetQuery(con, q)
names(all_docs)[1] <- "file_id"
names(all_docs)[3] <- "file_name"
## get all folders for all files
folder_ids <- all_docs %>%
pull(folder_id) %>%
paste(collapse = ",") %>%
unique()
q <- paste0(
"SELECT id, name, parent, project_id
FROM folder
WHERE id in (", folder_ids, ")"
)
remove(folder_ids)
all_folders <- get_parents(dbGetQuery(con, q))
names(all_folders)[1:3] <- c("folder_id", "folder_name", "parent_id")
docs_w_folders <- all_docs %>%
left_join(all_folders, by = c("folder_id" = "folder_id")) %>%
select(project_id.x, folder_id, folder_name, file_id,
file_name, bytes, mimetype, parent_id)
remove(all_docs)
## create paths in all_folders table
af_copy <- all_folders %>%
select(folder_id, parent_id)
another_copy <- af_copy
af_copy <- get_next_gen(af_copy, another_copy)
## get folder names from ids
another_copy <- get_folder_names(af_copy, all_folders)
names(another_copy) <- make.names(names(another_copy), unique = TRUE)
all_paths <- make_path(another_copy) %>%
select("folder_depth_1", "path")
all_folders <- all_folders %>%
left_join(all_paths, by = c("folder_id" = "folder_depth_1"))
## get project names
names(docs_w_folders)
names(project_names)
docs_w_folders <- docs_w_folders %>%
left_join(project_names, by = c("project_id.x" = "proj_id")) %>%
rename(proj_name = project_name, project_id.x = project_id) %>%
select(project_name, project_id, folder_name, folder_id, file_name,
file_id, bytes, mimetype, parent_id)
docs_w_folders <- docs_w_folders %>%
left_join(project_names, by = c("project_id.x" = "proj_id")) %>%
rename(project_name = proj_name, project_id = project_id.x) %>%
select(project_name, project_id, folder_name, folder_id, file_name,
file_id, bytes, mimetype, parent_id)
full_inventory <- docs_w_folders %>%
left_join(all_folders, by = c("folder_id" = "folder_id")) %>%
select(project_name, project_id, folder_name, folder_id, file_name,
file_id, bytes, mimetype, path)
## get project names
names(docs_w_folders)
names(all_folders)
full_inventory <- docs_w_folders %>%
left_join(all_folders[c("folder_id", "path")], by = c("folder_id" = "folder_id")) %>%
select(project_name, project_id, folder_name, folder_id, file_name,
file_id, bytes, mimetype, path)
names(full_inventory)
names(docs_w_folders)
pacman::p_load(tidyverse, DBI, RPostgreSQL, keyring)
source("01_nprb-inventory_functions.R")
# connect to the RW db
psql <- dbDriver("PostgreSQL")
con <- dbConnect(
drv = psql,
dbname = "research_workspace",
host = "oltp.db.axiomptk",
port = 5432,
password = key_get("workspace_read", keyring = "dbs"),
user = "workspace_read"
)
# Query RW db to get id and names for all projects in NPRB
# organization that match the regex
q <- paste0(
"SELECT id as proj_id, name as proj_name
FROM project
WHERE project.id IN
(SELECT project_id
FROM projectorgrole
WHERE projectorgrole.org_id IN
(SELECT id
FROM organization
WHERE organization.name='North Pacific Research Board'))
AND project.name ~ '^0[0-9]{3}[A-Za-z]* '
OR project.name ~ '^1[1-4]{1}[0-9]{2}[A-Za-z]* '"
)
project_names <- dbGetQuery(con, q)
## get all files in each project
proj_ids <- project_names %>%
pull(proj_id) %>%
paste(collapse = ",")
q <- paste0(
"SELECT id, bytes, filename, mimetype, folder_id, project_id
FROM document
WHERE project_id IN (", proj_ids ,")
AND deleted IS NULL
AND folder_id IS NOT NULL"
)
remove(proj_ids)
all_docs <- dbGetQuery(con, q)
names(all_docs)[1] <- "file_id"
names(all_docs)[3] <- "file_name"
## get all folders for all files
folder_ids <- all_docs %>%
pull(folder_id) %>%
paste(collapse = ",") %>%
unique()
q <- paste0(
"SELECT id, name, parent, project_id
FROM folder
WHERE id in (", folder_ids, ")"
)
remove(folder_ids)
all_folders <- get_parents(dbGetQuery(con, q))
names(all_folders)[1:3] <- c("folder_id", "folder_name", "parent_id")
docs_w_folders <- all_docs %>%
left_join(all_folders, by = c("folder_id" = "folder_id")) %>%
select(project_id.x, folder_id, folder_name, file_id,
file_name, bytes, mimetype, parent_id)
## create paths in all_folders table
af_copy <- all_folders %>%
select(folder_id, parent_id)
another_copy <- af_copy
af_copy <- get_next_gen(af_copy, another_copy)
## get folder names from ids
another_copy <- get_folder_names(af_copy, all_folders)
names(another_copy) <- make.names(names(another_copy), unique = TRUE)
all_paths <- make_path(another_copy) %>%
select("folder_depth_1", "path")
remove(another_copy)
all_folders <- all_folders %>%
left_join(all_paths, by = c("folder_id" = "folder_depth_1"))
## get project names
docs_w_folders <- docs_w_folders %>%
left_join(project_names, by = c("project_id.x" = "proj_id")) %>%
rename(project_name = proj_name, project_id = project_id.x) %>%
select(project_name, project_id, folder_name, folder_id, file_name,
file_id, bytes, mimetype)
full_inventory <- docs_w_folders %>%
left_join(all_folders[c("folder_id", "path")], by = c("folder_id" = "folder_id")) %>%
select(project_name, project_id, folder_name, folder_id, file_name,
file_id, bytes, mimetype, path)
rename(docs_w_folders)
remove(docs_w_folders)
summary(full_inventory)
write_csv(full_inventory, "01_nprb_inventory.csv")
remove(list=ls())
pacman::p_load(tidyverse, DBI, RPostgreSQL, keyring)
source("~/projects/dc/nprb_legacy/r_work/01_inventory.R", echo=TRUE)
gc()
gc()
source("~/projects/dc/nprb_legacy/r_work/01_inventory.R", echo=TRUE)
big_inv <- read_csv("data_out/01_full_inventory.csv")
pacman::p_load(tidyverse)
big_inv <- read_csv("data_out/01_full_inventory.csv")
sample_n(big_inv, 10)
unique(big_inv$mime_type)
unique(big_inv$mimetype)
nrow(big_inv %>% filter(mimetype == "application/xml") %>%
select(name, mimetype))
nrow(big_inv %>% filter(mimetype == "application/xml"))
all_xml <- big_inv %>%
filter(mimetype == "application/xml")
View(all_xml)
all_zip <- big_inv %>%
filter(str_ends(file_name, ".zip"))
View(all_zip)
View(all_zip)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml" OR str_ends(file_name, ".zip"))
zips_xml <- big_inv %>%
filter(mimetype == "application/xml" || str_ends(file_name, ".zip"))
zips_xml <- big_inv %>%
filter(mimetype == "application/xml")
zips_xml <- rbind(zips_xml, big_inv %>% filter(str_ends(file_name, ".zip")))
remove(list=("all_xml", "all_zip"))
remove(list=(c("all_xml", "all_zip")))
View(zips_xml)
zips_xml <- rbind(zips_xml, big_inv %>%
filter(str_ends(file_name, ".zip"))) %>%
relocate(project_name, file_name, path)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml")
zips_xml <- rbind(zips_xml, big_inv %>%
filter(str_ends(file_name, ".zip"))) %>%
relocate(project_name, file_name, path)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
relocate(project_name, file_name, path) %>%
order(project_name, file_name)
names(big_inv)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
order(project_name, file_name)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
order("project_name", "file_name")
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip")))
zips_xml <- zips_xml %>%
sort(by = c("project_name", "file_name"))
zips_xml <- zips_xml %>%
sort("project_name")
zips_xml <- zips_xml %>%
sort("project_name", decreasing = TRUE)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
setorder(cols=c(project_name, file_name, mimetype), order=1)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
data.table::setorder(cols=c(project_name, file_name, mimetype), order=1)
names(big_inv)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
data.table::setorder(cols=c(project_name, file_name), order=1)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
data.table::setorder(cols=c("project_name", "file_name"), order=1)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
data.table::setorder(c("project_name", "file_name"), order=1)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
data.table::setorder("project_name", order=1)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
data.table::setorder(project_name, order=1)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip")))
names(zips_xml)
zips_xml <- zips_xml[c(1,5,3,9,7,8,6,4,2)]
select(names(zips_xml)[c(1,5,3,9,7,8,6,4,2)]
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
arrange(project_name) %>%
select(names(zips_xml)[c(1,5,3,9,7,8,6,4,2)])
names(big_inv)
remove(zips_xml)
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
arrange(project_name) %>%
select(names(zips_xml)[c(1,5,3,9,7,8,6,4,2)])
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
arrange(project_name) %>%
select(names(big_inv)[c(1,5,3,9,7,8,6,4,2)])
filter(zips_xml, str_detect(file_name, "NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]"))
potential_archives <-
filter(zips_xml,
str_detect(file_name, "NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]"))
View(potential_archives)
potential_archives <-
filter(zips_xml,
str_detect(file_name, "NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
filter(folder == "Files")
potential_archives <-
filter(zips_xml,
str_detect(file_name, "NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
filter(folder_name == "Files")
View(potential_archives)
?count
count(potential_archives, project_name)
potential_archives <-
filter(zips_xml,
str_detect(file_name, "NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
filter(folder_name == "Files") %>%
count(project_name)
potential_archives <-
filter(zips_xml,
str_detect(file_name, "NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
filter(folder_name == "Files") %>%
count(project_name) > 1
potential_archives <-
filter(zips_xml,
str_detect(file_name, "NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
filter(folder_name == "Files")
x <- count(potential_archives, project_name) |>
filter(n > 1)
potential_archives <- potential_archives %>%
filter(project_name %in% x$project_name) %>%
arrange(project_name)
View(potential_archives)
total_projects <- length(unique(big_inv$project_name))
total_projects
projects_zip_xml <- length(unique(zips_xml$project_name))
projects_summary <- data.frame(
all_projects = total_projects,
project_zip_xml = projects_zip_xml,
potential_archives = length(unique(potential_archives$project_name))
)
get_volumes <- function(df){
df %>%
group_by(project_name) %>%
summarise(total_voume = sum(bytes),
n_files = count(file_name)) %>%
select(project_name, n_files, total_volume)
}
all_volumes <- get_volumes(big_inv)
get_volumes <- function(df){
df %>%
group_by(project_name) %>%
summarise(total_voume = sum(bytes),
n_files = count(file_id)) %>%
select(project_name, n_files, total_volume)
}
all_volumes <- get_volumes(big_inv)
names(big_inv)
get_volumes <- function(df){
df %>%
group_by(project_name) %>%
summarise(total_voume = sum(bytes),
n_files = n(file_name)) %>%
select(project_name, n_files, total_volume)
}
all_volumes <- get_volumes(big_inv)
get_volumes <- function(df){
df %>%
group_by(project_name) %>%
summarise(total_voume = sum(bytes),
n_files = n()) %>%
select(project_name, n_files, total_volume)
}
all_volumes <- get_volumes(big_inv)
get_volumes <- function(df){
df %>%
group_by(project_name) %>%
summarise(total_volume = sum(bytes),
n_files = n()) %>%
select(project_name, n_files, total_volume)
}
all_volumes <- get_volumes(big_inv)
zip_xml_volumes <- get_volumes(zips_xml)
volume_all <- get_volumes(big_inv)
volume_zip_xml <- get_volumes(zips_xml)
volume_potential_archives <- get_volumes(potential_archives)
remove(all_volumes)
remove(zip_xml_volumes)
write_csv(volume_all, "data_out/02_volume_all.csv")
write_csv(volume_zip_xml, "data_out/02_volume_zip_xml.csv")
write_csv(volume_potential_archives, "data_out/02_volume_potential_archives.csv")
write_csv(potential_archives, "data_out/02_potential_archives.csv")
write_csv(projects_summary, "data_out/02_projects_summary.csv")
remove(list=ls())
#' Get volume for all files in each project
#'
#' This function uses group_by to summarise the total volume and number of files
#' in each project in the `some_df` data frame. It returns a data frame with
#' the project name, number of files, and total volume in bytes.
#'
#' @param some_df a data frame with columns project_name, bytes, and file_name
#'
#' @noRd
get_volumes <- function(some_df){
some_df %>%
group_by(project_name) %>%
summarise(total_volume = sum(bytes),
n_files = n()) %>%
select(project_name, n_files, total_volume)
}
pacman::p_load(tidyverse)
source("00_inventory_functions.R")
big_inv <- read_csv("data_out/01_full_inventory.csv")
# get list of all projects with a zip file or an xml file
zips_xml <- big_inv %>%
filter(mimetype == "application/xml") %>%
rbind(big_inv %>% filter(str_ends(file_name, ".zip"))) %>%
arrange(project_name) %>%
select(names(big_inv)[c(1,5,3,9,7,8,6,4,2)])
zips_xml_n <- big_inv %>%
group_by(project_name) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml"))
potential_projects <- big_inv %>%
group_by(project_name) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 1 | n_xml > 1)
potential_projects <- big_inv %>%
group_by(project_name) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 1 & n_xml > 1)
# filter down to projects with files with appropriately formatted names
potential_archives <-
filter(big_inv$project_name %in% potential_projects$project_name)
potential_projects <- big_inv %>%
group_by(project_name) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 1,  n_xml > 1)
# filter down to projects with files with appropriately formatted names
potential_archives <-
filter(big_inv$project_name %in% potential_projects$project_name)
View(potential_projects)
# filter down to projects with files with appropriately formatted names
potential_archives <- big_inv %>%
(project_name %in% potential_projects$project_name)
# filter down to projects with files with appropriately formatted names
potential_archives <- big_inv %>%
(big_inv$project_name %in% potential_projects$project_name)
# filter down to projects with files with appropriately formatted names
potential_archives <- big_inv %>%
filter(project_name %in% potential_projects$project_name)
potential_projects <- big_inv %>%
group_by(project_name) %>%
filter(file_name %>%
str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 1,  n_xml > 1)
View(potential_projects)
potential_projects <- big_inv %>%
group_by(project_name) %>%
#filter(file_name %>%
#         str_detect("NPRB\\.2[0-9]{3}\\.[0-9]{2}\\.[zip|xml]")) %>%
summarize(n_zip = sum(mimetype == "application/zip"),
n_xml = sum(mimetype == "application/xml")) %>%
filter(n_zip > 1,  n_xml > 1)
View(potential_projects)
